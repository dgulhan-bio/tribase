#include "TH1D.h"
#include "parseTribaseFiles.h"
#ifdef __cplusplus
extern "C" {
#endif
  extern const int array[];
#ifdef __cplusplus
}
#endif

int maxPos(int chromNum){
  
}

int minPos(int chromNum){

}

TH1D* calculateCF(vector<Individ>, int chromNum = 1){
  int nIndivid = individs.size();
  TH1D * histCF = new TH1D("histCF", "", 40, 0, maxPos(chromNum));
  for(int ind = 0; ind < nIndivid; ind++){
    int nMut = individs[ind].getNMuts();
    for(int iMut = 0; iMut < nMut; iMut++){
      Mutation * mut1 = individuals.getIthMut(iMut);
      if(mut1->getChrom != chromNum) continue;
      for(int jMut = iMut; jMut < nMut; jMut++){
        Mutation * mut2 = individuals.getIthMut(jMut);
        if(mut2->getChrom != chromNum) continue; 
	histCF->Fill(mut1->getPos() - mut2->getPos());     
      }
    } 
  }
}

TH1D* calculateMI(vector<Individ>){
  int nIndivid = individs.size();
  TH1D * histCF = new TH1D("histCF", "", 40, 0, maxPos(chromNum) - minPos(chromNum));
  for(int ind = 0; ind < nIndivid; ind++){
    int nMut = individs[ind].getNMuts();
    for(int iMut = 0; iMut < nMut; iMut++){
      Mutation * mut1 = individuals.getIthMut(iMut);
      if(mut1->getChrom != chromNum) continue;
      for(int jMut = iMut; jMut < nMut; jMut++){
        Mutation * mut2 = individuals.getIthMut(jMut);
        if(mut2->getChrom != chromNum) continue; 
	histCF->Fill(mut1->getPos() - mut2->getPos());     
      }
    } 
  }

}

void plotFinalHist(TH1D * histCF, TH1D * histME, int chromNum = 1){
  
}

int main(int argc, char *argv[]){
  cout << argv[1] << endl; 
  string fileList = argv[1];
  Parser *parser = new Parser(fileList);
  vector<Individ> individs = parser->readIndivids();
  cout << "size of individs = " << individs.size() << endl;
  for(int i = 0; i < 23; i++){

  }

  cout << mut->getBaseIn() << " " << mut->getBaseOut() << endl;
  return 0;
}
